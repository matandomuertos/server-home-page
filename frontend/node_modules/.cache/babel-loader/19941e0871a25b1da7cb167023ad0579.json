{"ast":null,"code":"var _jsxFileName = \"/Users/nahuel.cassinari/github/matandomuertos/another-mern/frontend/src/components/Containers.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Stack from '@mui/material/Stack';\nimport Box from '@mui/material/Box';\nimport container from './../features/container';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Containers() {\n  _s();\n\n  const [cont, setCont] = useState([]);\n  useEffect(() => {\n    retrieveContainers();\n  }, []);\n\n  function retrieveContainers() {\n    container.getContainer().then(response => {\n      setCont(response.data.container);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: cont.map(app => /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: app.State\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        children: app.Status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 6\n    }, this))\n  }, void 0, false);\n}\n\n_s(Containers, \"OSJb+AMKeepNOYi4C1PtCQ3+I1I=\");\n\n_c = Containers;\nexport default Containers; // I should check how to do the error handling if the container doesn't exist\n\nvar _c;\n\n$RefreshReg$(_c, \"Containers\");","map":{"version":3,"names":["useState","useEffect","Stack","Box","container","Containers","cont","setCont","retrieveContainers","getContainer","then","response","data","map","app","State","Status"],"sources":["/Users/nahuel.cassinari/github/matandomuertos/another-mern/frontend/src/components/Containers.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport Stack from '@mui/material/Stack'\nimport Box from '@mui/material/Box'\nimport container from './../features/container'\n\nfunction Containers(){\n\n\tconst [cont, setCont] = useState([])\n\n\tuseEffect(() => {\n\t\tretrieveContainers()\n\t}, [])\n\n\tfunction retrieveContainers(){\n\t\tcontainer.getContainer().then(response => { setCont(response.data.container) })\n\t}\n\n\treturn(\n\t\t<>\n\t\t\t{\n\t\t\t\tcont.map((app) => (\n\t\t\t\t\t<Stack direction=\"row\" spacing={2}>\n\t\t\t\t\t\t<Box>{app.State}</Box>\n\t\t\t\t\t\t<Box>{app.Status}</Box>\n\t\t\t\t\t</Stack>\n\t\t\t\t))\n\t\t\t}\n\t\t</>\n\t)\n}\n\nexport default Containers\n\n// I should check how to do the error handling if the container doesn't exist"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;;;;AAEA,SAASC,UAAT,GAAqB;EAAA;;EAEpB,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;EAEAC,SAAS,CAAC,MAAM;IACfO,kBAAkB;EAClB,CAFQ,EAEN,EAFM,CAAT;;EAIA,SAASA,kBAAT,GAA6B;IAC5BJ,SAAS,CAACK,YAAV,GAAyBC,IAAzB,CAA8BC,QAAQ,IAAI;MAAEJ,OAAO,CAACI,QAAQ,CAACC,IAAT,CAAcR,SAAf,CAAP;IAAkC,CAA9E;EACA;;EAED,oBACC;IAAA,UAEEE,IAAI,CAACO,GAAL,CAAUC,GAAD,iBACR,QAAC,KAAD;MAAO,SAAS,EAAC,KAAjB;MAAuB,OAAO,EAAE,CAAhC;MAAA,wBACC,QAAC,GAAD;QAAA,UAAMA,GAAG,CAACC;MAAV;QAAA;QAAA;QAAA;MAAA,QADD,eAEC,QAAC,GAAD;QAAA,UAAMD,GAAG,CAACE;MAAV;QAAA;QAAA;QAAA;MAAA,QAFD;IAAA;MAAA;MAAA;MAAA;IAAA,QADD;EAFF,iBADD;AAYA;;GAxBQX,U;;KAAAA,U;AA0BT,eAAeA,UAAf,C,CAEA"},"metadata":{},"sourceType":"module"}